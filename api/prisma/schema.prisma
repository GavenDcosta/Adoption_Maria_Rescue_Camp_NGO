// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  email       String        @unique
  username    String        @unique
  password    String
  avatar      String?
  createdAt   DateTime      @default(now())
  posts       Post[]
  savedPosts  SavedPost[]
  bookedPosts BookedPosts[]
}

model Post {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  gender      String
  price       Int?
  images      String[]
  address     String
  city        String
  age         Int?
  createdAt   DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @db.ObjectId
  postDetail  PostDetail? // No `onDelete` here
  savedPosts  SavedPost[]
  bookedPosts BookedPosts[]
  status      Status        @default(not_adopted)
}

model PostDetail {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  description       String
  species           String?
  breed             String?
  temperament       Temperament
  vaccinationStatus Vaccination
  income            String?
  post              Post        @relation(fields: [postId], references: [id], onDelete: Cascade) // `onDelete` specified here
  postId            String      @unique @db.ObjectId
}

enum Temperament {
  friendly
  shy
  energetic
}

enum Vaccination {
  vaccinated
  not_vaccinated
}

enum Status {
  adopted
  not_adopted
  booking
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade) // `onDelete` specified here
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model BookedPosts {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade) // `onDelete` specified here
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}
